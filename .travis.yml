# Travis-ci config. Starting point was this:
# https://conda.io/docs/user-guide/tasks/use-conda-with-travis-ci.html
dist: xenial
language: python

env:
  global:
    - TWINE_USERNAME=bmatthieu3
    - DOCKER_IMAGE_LINUX_32=daald/ubuntu32:xenial
    - DOCKER_CONTAINER_LINUX_32=ubuntu32_container
    - DOCKER_CONTAINER_DEPLOY_DOC=deploy_doc

# Define the order of the stages
stages:
  - Testing
  # Stage reponsible for building and publishing the wheels
  # to PyPI. Architecture supported:
  # - manylinux1_x86_64 py3.5->3.7
  # - osx py3.5->3.7
  - name: Deploying
    if: tag IS present

addons:
  apt:
    update: true

jobs:
  include:
    - stage: Testing
      name: "Python=3.5 linux x86_64"
      os: linux
      python: 3.5
      env:
        - PIP=pip
        - PYTHON=python
      install:
        # Install Rust compiler
        - curl https://sh.rustup.rs -sSf | sh -s -- --default-toolchain nightly -y
        - export PATH="$HOME/.cargo/bin:$PATH"
        # Install the dependencies for running the test and building the docs
        - $PIP install -r requirements/contributing.txt
        - $PIP install setuptools setuptools_rust
        # Generate the dynamic library from the cdshealpix Rust crate.
        # This will download the crate from crates.io and build it first.
        - $PYTHON setup.py build_rust
        # Move the dynamic lib to the python package folder
        - find build/ -name "*.so" -type f -exec cp {} ./mocpy \;
      script: ./travis/testing.sh
    - name: "Python=3.7 linux x86_64"
      os: linux
      python: 3.7
      env:
        - PIP=pip
        - PYTHON=python
      install:
        # Install Rust compiler
        - curl https://sh.rustup.rs -sSf | sh -s -- --default-toolchain nightly -y
        - export PATH="$HOME/.cargo/bin:$PATH"
        # Install the dependencies for running the test and building the docs
        - $PIP install -r requirements/contributing.txt
        - $PIP install setuptools setuptools_rust
        # Generate the dynamic library from the cdshealpix Rust crate.
        # This will download the crate from crates.io and build it first.
        - $PYTHON setup.py build_rust
        # Move the dynamic lib to the python package folder
        - find build/ -name "*.so" -type f -exec cp {} ./mocpy \;
      script: ./travis/testing.sh
    # - name: "Python=3.5 Linux_i686"
    #   os: linux
    #   services:
    #     - docker
    #   before_install:
    #     - docker pull "${DOCKER_IMAGE_LINUX_32}"
    #     - >
    #       docker run
    #       --volume ${PWD}:/mnt/mocpy
    #       --name "${DOCKER_CONTAINER_LINUX_32}"
    #       --rm
    #       --interactive
    #       --tty
    #       --detach
    #       "${DOCKER_IMAGE_LINUX_32}"
    #   script:
    #     - >
    #       docker exec 
    #       --interactive
    #       --tty
    #       "${DOCKER_CONTAINER_LINUX_32}"
    #       sh -c "cd /mnt/mocpy && ./travis/testing_i686.sh"
    - name: "Python=3.7 OSX"
      os: osx
      python: 3.7
      language: generic
      env:
        - PIP=pip3
        - PYTHON=python3
      install:
        # Install Rust compiler
        - curl https://sh.rustup.rs -sSf | sh -s -- --default-toolchain nightly -y
        - export PATH="$HOME/.cargo/bin:$PATH"
        # Install the dependencies for running the test and building the docs
        - $PIP install setuptools setuptools_rust
        - $PIP install -r requirements/contributing.txt
        # Generate the dynamic library from the cdshealpix Rust crate.
        # This will download the crate from crates.io and build it first.
        - $PYTHON setup.py build_rust
        # Move the dynamic lib to the python package folder
        - find build/ -name "*.so" -type f -exec cp {} ./mocpy \;
      script: ./travis/testing.sh
    - name: "Python=3.7 Building docs"
      os: linux
      python: 3.7
      env:
        - PIP=pip
        - PYTHON=python
      install:
        # Install Rust compiler
        - curl https://sh.rustup.rs -sSf | sh -s -- --default-toolchain nightly -y
        - export PATH="$HOME/.cargo/bin:$PATH"
        # Install the dependencies for running the test and building the docs
        - $PIP install -r requirements/contributing.txt
        - $PIP install setuptools setuptools_rust
        # Generate the dynamic library from the cdshealpix Rust crate.
        # This will download the crate from crates.io and build it first.
        - $PYTHON setup.py build_rust
        # Move the dynamic lib to the python package folder
        - find build/ -name "*.so" -type f -exec cp {} ./mocpy \;
      script:
        # Test docs build:
        - cd docs
        - make html
        # Execute the tests found in the doc
        - make doctest
        - cd ..
    #### DEPLOYING STAGE ####
    - stage: Deploying
      name: "Update doc to gh-pages"
      os: linux
      services:
        - docker
      before_install:
        - docker pull ubuntu
        - >
          docker run
          --volume ${PWD}:/mnt/mocpy
          --name "${DOCKER_CONTAINER_DEPLOY_DOC}"
          --rm
          --interactive
          --tty
          --detach
          ubuntu
      script:
        - >
          docker exec 
          --interactive
          --tty
          --env GH_EMAIL="${GH_EMAIL}"
          --env GH_NAME="${GH_NAME}"
          --env GH_TOKEN="${GH_TOKEN}"
          "${DOCKER_CONTAINER_DEPLOY_DOC}"
          sh -c "cd /mnt/mocpy && ./travis/deploy_doc.sh"
    - name: "manylinux_x86_64"
      # Job generating the wheels for Linux 64-bit platforms
      os: linux
      sudo: required
      env:
        - CIBW_SKIP="*manylinux_i686* cp27-* cp34-* pp27-*"
        - PIP=pip
        - PYTHON=python3
      services:
        - docker
      script: ./travis/deploy.sh
    - name: "manylinux_i686"
      # Job generating the wheels for Linux 32-bit platforms
      os: linux
      sudo: required
      env:
        - CIBW_SKIP="*manylinux_x86_64* cp34-* cp27-*"
        - PIP=pip
        - PYTHON=python3
      services:
        - docker
      script: ./travis/deploy_i686.sh
    - name: "OSX"
      os: osx
      sudo: required
      language: generic
      env:
        - CIBW_SKIP="cp27-* cp34-*"
        - PIP=pip2
        - PYTHON=python2
      script: ./travis/deploy.sh
